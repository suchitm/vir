// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// mv_probit_lp_m_lq_z
double mv_probit_lp_m_lq_z(Eigen::MatrixXd& X_s, Eigen::MatrixXi& Y_s, Eigen::MatrixXd& mu_theta, Eigen::MatrixXd& msigma_theta, Eigen::MatrixXd& mu_psi, Eigen::MatrixXd& msigma_psi, Eigen::VectorXd& mu_b0, Eigen::VectorXd& vsigma2_b0, Eigen::MatrixXd& mu_B, Eigen::MatrixXd& msigma_B, double& logdet_msigma_psi, double& logdet_msigma_theta, int& N, int& S, int& M);
RcppExport SEXP _vir_mv_probit_lp_m_lq_z(SEXP X_sSEXP, SEXP Y_sSEXP, SEXP mu_thetaSEXP, SEXP msigma_thetaSEXP, SEXP mu_psiSEXP, SEXP msigma_psiSEXP, SEXP mu_b0SEXP, SEXP vsigma2_b0SEXP, SEXP mu_BSEXP, SEXP msigma_BSEXP, SEXP logdet_msigma_psiSEXP, SEXP logdet_msigma_thetaSEXP, SEXP NSEXP, SEXP SSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X_s(X_sSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type Y_s(Y_sSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu_theta(mu_thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type msigma_theta(msigma_thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu_psi(mu_psiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type msigma_psi(msigma_psiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type mu_b0(mu_b0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type vsigma2_b0(vsigma2_b0SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu_B(mu_BSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type msigma_B(msigma_BSEXP);
    Rcpp::traits::input_parameter< double& >::type logdet_msigma_psi(logdet_msigma_psiSEXP);
    Rcpp::traits::input_parameter< double& >::type logdet_msigma_theta(logdet_msigma_thetaSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(mv_probit_lp_m_lq_z(X_s, Y_s, mu_theta, msigma_theta, mu_psi, msigma_psi, mu_b0, vsigma2_b0, mu_B, msigma_B, logdet_msigma_psi, logdet_msigma_theta, N, S, M));
    return rcpp_result_gen;
END_RCPP
}
// lp_indep_matrix_normal
double lp_indep_matrix_normal(Eigen::MatrixXd& mu_prec, double& mu_logdet_prec, Eigen::MatrixXd& mu, Eigen::MatrixXd& msigma, int& P, int& M);
RcppExport SEXP _vir_lp_indep_matrix_normal(SEXP mu_precSEXP, SEXP mu_logdet_precSEXP, SEXP muSEXP, SEXP msigmaSEXP, SEXP PSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu_prec(mu_precSEXP);
    Rcpp::traits::input_parameter< double& >::type mu_logdet_prec(mu_logdet_precSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type msigma(msigmaSEXP);
    Rcpp::traits::input_parameter< int& >::type P(PSEXP);
    Rcpp::traits::input_parameter< int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(lp_indep_matrix_normal(mu_prec, mu_logdet_prec, mu, msigma, P, M));
    return rcpp_result_gen;
END_RCPP
}
// lm_hs_gibbs
Rcpp::List lm_hs_gibbs(Eigen::VectorXd y, Eigen::MatrixXd X, bool verbose, int n_iter, double a_tau, double b_tau);
RcppExport SEXP _vir_lm_hs_gibbs(SEXP ySEXP, SEXP XSEXP, SEXP verboseSEXP, SEXP n_iterSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_hs_gibbs(y, X, verbose, n_iter, a_tau, b_tau));
    return rcpp_result_gen;
END_RCPP
}
// lm_hs_cavi
Rcpp::List lm_hs_cavi(Eigen::VectorXd y, Eigen::MatrixXd X, int n_iter, bool verbose, double a_tau, double b_tau, double rel_tol, int type);
RcppExport SEXP _vir_lm_hs_cavi(SEXP ySEXP, SEXP XSEXP, SEXP n_iterSEXP, SEXP verboseSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP, SEXP rel_tolSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_hs_cavi(y, X, n_iter, verbose, a_tau, b_tau, rel_tol, type));
    return rcpp_result_gen;
END_RCPP
}
// lm_hs_svi
Rcpp::List lm_hs_svi(Eigen::VectorXd y, Eigen::MatrixXd X, bool verbose, int n_iter, double a_tau, double b_tau, int type, int batch_size, double const_rhot, double omega, double kappa);
RcppExport SEXP _vir_lm_hs_svi(SEXP ySEXP, SEXP XSEXP, SEXP verboseSEXP, SEXP n_iterSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP, SEXP typeSEXP, SEXP batch_sizeSEXP, SEXP const_rhotSEXP, SEXP omegaSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type const_rhot(const_rhotSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_hs_svi(y, X, verbose, n_iter, a_tau, b_tau, type, batch_size, const_rhot, omega, kappa));
    return rcpp_result_gen;
END_RCPP
}
// lm_lasso_gibbs
Rcpp::List lm_lasso_gibbs(Eigen::VectorXd y, Eigen::MatrixXd X, bool verbose, int n_iter, double a_tau, double b_tau, double a_lambda, double b_lambda);
RcppExport SEXP _vir_lm_lasso_gibbs(SEXP ySEXP, SEXP XSEXP, SEXP verboseSEXP, SEXP n_iterSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP, SEXP a_lambdaSEXP, SEXP b_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    Rcpp::traits::input_parameter< double >::type a_lambda(a_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type b_lambda(b_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_lasso_gibbs(y, X, verbose, n_iter, a_tau, b_tau, a_lambda, b_lambda));
    return rcpp_result_gen;
END_RCPP
}
// lm_lasso_cavi
Rcpp::List lm_lasso_cavi(Eigen::VectorXd y, Eigen::MatrixXd X, bool verbose, int n_iter, double a_tau, double b_tau, double a_lambda2, double b_lambda2, double rel_tol, int type);
RcppExport SEXP _vir_lm_lasso_cavi(SEXP ySEXP, SEXP XSEXP, SEXP verboseSEXP, SEXP n_iterSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP, SEXP a_lambda2SEXP, SEXP b_lambda2SEXP, SEXP rel_tolSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    Rcpp::traits::input_parameter< double >::type a_lambda2(a_lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type b_lambda2(b_lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_lasso_cavi(y, X, verbose, n_iter, a_tau, b_tau, a_lambda2, b_lambda2, rel_tol, type));
    return rcpp_result_gen;
END_RCPP
}
// lm_lasso_svi
Rcpp::List lm_lasso_svi(Eigen::VectorXd y, Eigen::MatrixXd X, bool verbose, int n_iter, double a_tau, double b_tau, double a_lambda2, double b_lambda2, int type, int batch_size, double const_rhot, double omega, double kappa);
RcppExport SEXP _vir_lm_lasso_svi(SEXP ySEXP, SEXP XSEXP, SEXP verboseSEXP, SEXP n_iterSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP, SEXP a_lambda2SEXP, SEXP b_lambda2SEXP, SEXP typeSEXP, SEXP batch_sizeSEXP, SEXP const_rhotSEXP, SEXP omegaSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    Rcpp::traits::input_parameter< double >::type a_lambda2(a_lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type b_lambda2(b_lambda2SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type const_rhot(const_rhotSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_lasso_svi(y, X, verbose, n_iter, a_tau, b_tau, a_lambda2, b_lambda2, type, batch_size, const_rhot, omega, kappa));
    return rcpp_result_gen;
END_RCPP
}
// lm_ridge_gibbs
Rcpp::List lm_ridge_gibbs(Eigen::VectorXd y, Eigen::MatrixXd X, bool verbose, int n_iter, double a_tau, double b_tau, double a_lambda, double b_lambda);
RcppExport SEXP _vir_lm_ridge_gibbs(SEXP ySEXP, SEXP XSEXP, SEXP verboseSEXP, SEXP n_iterSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP, SEXP a_lambdaSEXP, SEXP b_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    Rcpp::traits::input_parameter< double >::type a_lambda(a_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type b_lambda(b_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_ridge_gibbs(y, X, verbose, n_iter, a_tau, b_tau, a_lambda, b_lambda));
    return rcpp_result_gen;
END_RCPP
}
// lm_ridge_gibbs_b0
double lm_ridge_gibbs_b0(double& y_bar, double& tau, double& b0, int& N);
RcppExport SEXP _vir_lm_ridge_gibbs_b0(SEXP y_barSEXP, SEXP tauSEXP, SEXP b0SEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double& >::type y_bar(y_barSEXP);
    Rcpp::traits::input_parameter< double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_ridge_gibbs_b0(y_bar, tau, b0, N));
    return rcpp_result_gen;
END_RCPP
}
// lm_ridge_gibbs_b
Eigen::VectorXd lm_ridge_gibbs_b(Eigen::MatrixXd& X, Eigen::VectorXd& y, double& lambda, double& tau, Eigen::VectorXd& b, int& P);
RcppExport SEXP _vir_lm_ridge_gibbs_b(SEXP XSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP tauSEXP, SEXP bSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< int& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_ridge_gibbs_b(X, y, lambda, tau, b, P));
    return rcpp_result_gen;
END_RCPP
}
// lm_ridge_gibbs_tau
double lm_ridge_gibbs_tau(Eigen::VectorXd& ehat, Eigen::VectorXd& b, double& lambda, double& tau, double& a_tau, double& b_tau, int& N, int& P);
RcppExport SEXP _vir_lm_ridge_gibbs_tau(SEXP ehatSEXP, SEXP bSEXP, SEXP lambdaSEXP, SEXP tauSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP, SEXP NSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type ehat(ehatSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double& >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double& >::type b_tau(b_tauSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< int& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_ridge_gibbs_tau(ehat, b, lambda, tau, a_tau, b_tau, N, P));
    return rcpp_result_gen;
END_RCPP
}
// lm_ridge_gibbs_lambda
double lm_ridge_gibbs_lambda(Eigen::VectorXd& b, double& tau, double& lambda, double& a_lambda, double& b_lambda, int& P);
RcppExport SEXP _vir_lm_ridge_gibbs_lambda(SEXP bSEXP, SEXP tauSEXP, SEXP lambdaSEXP, SEXP a_lambdaSEXP, SEXP b_lambdaSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double& >::type a_lambda(a_lambdaSEXP);
    Rcpp::traits::input_parameter< double& >::type b_lambda(b_lambdaSEXP);
    Rcpp::traits::input_parameter< int& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_ridge_gibbs_lambda(b, tau, lambda, a_lambda, b_lambda, P));
    return rcpp_result_gen;
END_RCPP
}
// lm_ridge_cavi
Rcpp::List lm_ridge_cavi(Eigen::VectorXd y, Eigen::MatrixXd X, int n_iter, bool verbose, double a_tau, double b_tau, double a_lambda, double b_lambda, double rel_tol, int type);
RcppExport SEXP _vir_lm_ridge_cavi(SEXP ySEXP, SEXP XSEXP, SEXP n_iterSEXP, SEXP verboseSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP, SEXP a_lambdaSEXP, SEXP b_lambdaSEXP, SEXP rel_tolSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    Rcpp::traits::input_parameter< double >::type a_lambda(a_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type b_lambda(b_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_ridge_cavi(y, X, n_iter, verbose, a_tau, b_tau, a_lambda, b_lambda, rel_tol, type));
    return rcpp_result_gen;
END_RCPP
}
// lm_ridge_svi
Rcpp::List lm_ridge_svi(Eigen::VectorXd y, Eigen::MatrixXd X, int n_iter, bool verbose, double a_tau, double b_tau, double a_lambda, double b_lambda, int type, int batch_size, double const_rhot, double omega, double kappa);
RcppExport SEXP _vir_lm_ridge_svi(SEXP ySEXP, SEXP XSEXP, SEXP n_iterSEXP, SEXP verboseSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP, SEXP a_lambdaSEXP, SEXP b_lambdaSEXP, SEXP typeSEXP, SEXP batch_sizeSEXP, SEXP const_rhotSEXP, SEXP omegaSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    Rcpp::traits::input_parameter< double >::type a_lambda(a_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type b_lambda(b_lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type const_rhot(const_rhotSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_ridge_svi(y, X, n_iter, verbose, a_tau, b_tau, a_lambda, b_lambda, type, batch_size, const_rhot, omega, kappa));
    return rcpp_result_gen;
END_RCPP
}
// mv_lm_uninf_gibbs_cpp
Rcpp::List mv_lm_uninf_gibbs_cpp(Eigen::MatrixXd Y, Eigen::MatrixXd X, int K, int n_iter, int burn_in, bool verbose, double a_tau, double b_tau);
RcppExport SEXP _vir_mv_lm_uninf_gibbs_cpp(SEXP YSEXP, SEXP XSEXP, SEXP KSEXP, SEXP n_iterSEXP, SEXP burn_inSEXP, SEXP verboseSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(mv_lm_uninf_gibbs_cpp(Y, X, K, n_iter, burn_in, verbose, a_tau, b_tau));
    return rcpp_result_gen;
END_RCPP
}
// mv_lm_uninf_cavi_cpp
Rcpp::List mv_lm_uninf_cavi_cpp(Eigen::MatrixXd Y, Eigen::MatrixXd X, int K, int n_iter, bool verbose, double a_tau, double b_tau, double rel_tol);
RcppExport SEXP _vir_mv_lm_uninf_cavi_cpp(SEXP YSEXP, SEXP XSEXP, SEXP KSEXP, SEXP n_iterSEXP, SEXP verboseSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP, SEXP rel_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(mv_lm_uninf_cavi_cpp(Y, X, K, n_iter, verbose, a_tau, b_tau, rel_tol));
    return rcpp_result_gen;
END_RCPP
}
// mv_probit_uninf_gibbs_cpp
Rcpp::List mv_probit_uninf_gibbs_cpp(Eigen::MatrixXi Y, Eigen::MatrixXd X, int K, int n_iter, int burn_in, bool verbose);
RcppExport SEXP _vir_mv_probit_uninf_gibbs_cpp(SEXP YSEXP, SEXP XSEXP, SEXP KSEXP, SEXP n_iterSEXP, SEXP burn_inSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXi >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(mv_probit_uninf_gibbs_cpp(Y, X, K, n_iter, burn_in, verbose));
    return rcpp_result_gen;
END_RCPP
}
// mv_probit_uninf_cavi_cpp
Rcpp::List mv_probit_uninf_cavi_cpp(Eigen::MatrixXi Y, Eigen::MatrixXd X, int K, int n_iter, bool verbose, double a_tau, double b_tau, double rel_tol);
RcppExport SEXP _vir_mv_probit_uninf_cavi_cpp(SEXP YSEXP, SEXP XSEXP, SEXP KSEXP, SEXP n_iterSEXP, SEXP verboseSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP, SEXP rel_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXi >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(mv_probit_uninf_cavi_cpp(Y, X, K, n_iter, verbose, a_tau, b_tau, rel_tol));
    return rcpp_result_gen;
END_RCPP
}
// mv_probit_uninf_svi_cpp
Rcpp::List mv_probit_uninf_svi_cpp(Eigen::MatrixXi Y, Eigen::MatrixXd X, int K, int n_iter, bool verbose, int batch_size, double omega, double kappa, double const_rhot);
RcppExport SEXP _vir_mv_probit_uninf_svi_cpp(SEXP YSEXP, SEXP XSEXP, SEXP KSEXP, SEXP n_iterSEXP, SEXP verboseSEXP, SEXP batch_sizeSEXP, SEXP omegaSEXP, SEXP kappaSEXP, SEXP const_rhotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXi >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type const_rhot(const_rhotSEXP);
    rcpp_result_gen = Rcpp::wrap(mv_probit_uninf_svi_cpp(Y, X, K, n_iter, verbose, batch_size, omega, kappa, const_rhot));
    return rcpp_result_gen;
END_RCPP
}
// probit_gibbs_z
Eigen::VectorXd probit_gibbs_z(Eigen::VectorXi& y, Eigen::VectorXd& eta, int& N, Eigen::VectorXd& z);
RcppExport SEXP _vir_probit_gibbs_z(SEXP ySEXP, SEXP etaSEXP, SEXP NSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_gibbs_z(y, eta, N, z));
    return rcpp_result_gen;
END_RCPP
}
// probit_gibbs_b0
double probit_gibbs_b0(Eigen::VectorXd& ehat, int& N, double& b0);
RcppExport SEXP _vir_probit_gibbs_b0(SEXP ehatSEXP, SEXP NSEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type ehat(ehatSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< double& >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(probit_gibbs_b0(ehat, N, b0));
    return rcpp_result_gen;
END_RCPP
}
// probit_gibbs_b
Eigen::VectorXd probit_gibbs_b(Eigen::MatrixXd& X, Eigen::VectorXd& ehat, Eigen::MatrixXd& prior_mat, int& P, Eigen::VectorXd& b);
RcppExport SEXP _vir_probit_gibbs_b(SEXP XSEXP, SEXP ehatSEXP, SEXP prior_matSEXP, SEXP PSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type ehat(ehatSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type prior_mat(prior_matSEXP);
    Rcpp::traits::input_parameter< int& >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_gibbs_b(X, ehat, prior_mat, P, b));
    return rcpp_result_gen;
END_RCPP
}
// probit_log_lik
double probit_log_lik(Eigen::VectorXi& y, Eigen::MatrixXd& X, double& b0, Eigen::VectorXd& b, int& N);
RcppExport SEXP _vir_probit_log_lik(SEXP ySEXP, SEXP XSEXP, SEXP b0SEXP, SEXP bSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_log_lik(y, X, b0, b, N));
    return rcpp_result_gen;
END_RCPP
}
// probit_vi_z
Rcpp::List probit_vi_z(Eigen::MatrixXd& X_s, Rcpp::List& param_b0, Rcpp::List& param_b, int& S, Rcpp::List& param_z);
RcppExport SEXP _vir_probit_vi_z(SEXP X_sSEXP, SEXP param_b0SEXP, SEXP param_bSEXP, SEXP SSEXP, SEXP param_zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X_s(X_sSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type param_b0(param_b0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type param_b(param_bSEXP);
    Rcpp::traits::input_parameter< int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type param_z(param_zSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_vi_z(X_s, param_b0, param_b, S, param_z));
    return rcpp_result_gen;
END_RCPP
}
// probit_vi_b0
Rcpp::List probit_vi_b0(Eigen::MatrixXd& X_s, Rcpp::List& param_z, Rcpp::List& param_b, int& N, int& S, Rcpp::List& param_b0);
RcppExport SEXP _vir_probit_vi_b0(SEXP X_sSEXP, SEXP param_zSEXP, SEXP param_bSEXP, SEXP NSEXP, SEXP SSEXP, SEXP param_b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X_s(X_sSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type param_z(param_zSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type param_b(param_bSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type param_b0(param_b0SEXP);
    rcpp_result_gen = Rcpp::wrap(probit_vi_b0(X_s, param_z, param_b, N, S, param_b0));
    return rcpp_result_gen;
END_RCPP
}
// probit_vi_b
Rcpp::List probit_vi_b(Eigen::MatrixXd& X_s, Rcpp::List& param_z, Rcpp::List& param_b0, Eigen::MatrixXd& mu_prior_mat, int& N, int& S, int& P, int& type, bool cavi, Rcpp::List& param_b);
RcppExport SEXP _vir_probit_vi_b(SEXP X_sSEXP, SEXP param_zSEXP, SEXP param_b0SEXP, SEXP mu_prior_matSEXP, SEXP NSEXP, SEXP SSEXP, SEXP PSEXP, SEXP typeSEXP, SEXP caviSEXP, SEXP param_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X_s(X_sSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type param_z(param_zSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type param_b0(param_b0SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu_prior_mat(mu_prior_matSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int& >::type P(PSEXP);
    Rcpp::traits::input_parameter< int& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type cavi(caviSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type param_b(param_bSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_vi_b(X_s, param_z, param_b0, mu_prior_mat, N, S, P, type, cavi, param_b));
    return rcpp_result_gen;
END_RCPP
}
// probit_hs_gibbs
Rcpp::List probit_hs_gibbs(Eigen::VectorXi y, Eigen::MatrixXd X, bool verbose, int n_iter);
RcppExport SEXP _vir_probit_hs_gibbs(SEXP ySEXP, SEXP XSEXP, SEXP verboseSEXP, SEXP n_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_hs_gibbs(y, X, verbose, n_iter));
    return rcpp_result_gen;
END_RCPP
}
// probit_hs_cavi
Rcpp::List probit_hs_cavi(Eigen::VectorXi y, Eigen::MatrixXd X, int n_iter, bool verbose, double tol, int type);
RcppExport SEXP _vir_probit_hs_cavi(SEXP ySEXP, SEXP XSEXP, SEXP n_iterSEXP, SEXP verboseSEXP, SEXP tolSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_hs_cavi(y, X, n_iter, verbose, tol, type));
    return rcpp_result_gen;
END_RCPP
}
// probit_hs_svi
Rcpp::List probit_hs_svi(Eigen::VectorXi y, Eigen::MatrixXd X, bool verbose, int n_iter, int type, int batch_size, double omega, double kappa, double const_rhot);
RcppExport SEXP _vir_probit_hs_svi(SEXP ySEXP, SEXP XSEXP, SEXP verboseSEXP, SEXP n_iterSEXP, SEXP typeSEXP, SEXP batch_sizeSEXP, SEXP omegaSEXP, SEXP kappaSEXP, SEXP const_rhotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type const_rhot(const_rhotSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_hs_svi(y, X, verbose, n_iter, type, batch_size, omega, kappa, const_rhot));
    return rcpp_result_gen;
END_RCPP
}
// probit_lasso_gibbs
Rcpp::List probit_lasso_gibbs(Eigen::VectorXi y, Eigen::MatrixXd X, bool verbose, int n_iter, double a_lambda2, double b_lambda2);
RcppExport SEXP _vir_probit_lasso_gibbs(SEXP ySEXP, SEXP XSEXP, SEXP verboseSEXP, SEXP n_iterSEXP, SEXP a_lambda2SEXP, SEXP b_lambda2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type a_lambda2(a_lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type b_lambda2(b_lambda2SEXP);
    rcpp_result_gen = Rcpp::wrap(probit_lasso_gibbs(y, X, verbose, n_iter, a_lambda2, b_lambda2));
    return rcpp_result_gen;
END_RCPP
}
// probit_lasso_cavi
Rcpp::List probit_lasso_cavi(Eigen::VectorXi y, Eigen::MatrixXd X, int n_iter, bool verbose, double a_lambda2, double b_lambda2, double tol, int type);
RcppExport SEXP _vir_probit_lasso_cavi(SEXP ySEXP, SEXP XSEXP, SEXP n_iterSEXP, SEXP verboseSEXP, SEXP a_lambda2SEXP, SEXP b_lambda2SEXP, SEXP tolSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type a_lambda2(a_lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type b_lambda2(b_lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_lasso_cavi(y, X, n_iter, verbose, a_lambda2, b_lambda2, tol, type));
    return rcpp_result_gen;
END_RCPP
}
// probit_lasso_svi
Rcpp::List probit_lasso_svi(Eigen::VectorXi y, Eigen::MatrixXd X, bool verbose, int n_iter, double a_lambda2, double b_lambda2, int type, int batch_size, double omega, double kappa, double const_rhot);
RcppExport SEXP _vir_probit_lasso_svi(SEXP ySEXP, SEXP XSEXP, SEXP verboseSEXP, SEXP n_iterSEXP, SEXP a_lambda2SEXP, SEXP b_lambda2SEXP, SEXP typeSEXP, SEXP batch_sizeSEXP, SEXP omegaSEXP, SEXP kappaSEXP, SEXP const_rhotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type a_lambda2(a_lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type b_lambda2(b_lambda2SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type const_rhot(const_rhotSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_lasso_svi(y, X, verbose, n_iter, a_lambda2, b_lambda2, type, batch_size, omega, kappa, const_rhot));
    return rcpp_result_gen;
END_RCPP
}
// probit_ridge_gibbs
Rcpp::List probit_ridge_gibbs(Eigen::VectorXi y, Eigen::MatrixXd X, bool verbose, int n_iter, double a_lambda, double b_lambda);
RcppExport SEXP _vir_probit_ridge_gibbs(SEXP ySEXP, SEXP XSEXP, SEXP verboseSEXP, SEXP n_iterSEXP, SEXP a_lambdaSEXP, SEXP b_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type a_lambda(a_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type b_lambda(b_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_ridge_gibbs(y, X, verbose, n_iter, a_lambda, b_lambda));
    return rcpp_result_gen;
END_RCPP
}
// probit_ridge_cavi
Rcpp::List probit_ridge_cavi(Eigen::VectorXi y, Eigen::MatrixXd X, int n_iter, bool verbose, double a_lambda, double b_lambda, double tol, int type);
RcppExport SEXP _vir_probit_ridge_cavi(SEXP ySEXP, SEXP XSEXP, SEXP n_iterSEXP, SEXP verboseSEXP, SEXP a_lambdaSEXP, SEXP b_lambdaSEXP, SEXP tolSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type a_lambda(a_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type b_lambda(b_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_ridge_cavi(y, X, n_iter, verbose, a_lambda, b_lambda, tol, type));
    return rcpp_result_gen;
END_RCPP
}
// probit_ridge_svi
Rcpp::List probit_ridge_svi(Eigen::VectorXi y, Eigen::MatrixXd X, bool verbose, int n_iter, double a_lambda, double b_lambda, int type, int batch_size, double omega, double kappa, double const_rhot);
RcppExport SEXP _vir_probit_ridge_svi(SEXP ySEXP, SEXP XSEXP, SEXP verboseSEXP, SEXP n_iterSEXP, SEXP a_lambdaSEXP, SEXP b_lambdaSEXP, SEXP typeSEXP, SEXP batch_sizeSEXP, SEXP omegaSEXP, SEXP kappaSEXP, SEXP const_rhotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type a_lambda(a_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type b_lambda(b_lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type const_rhot(const_rhotSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_ridge_svi(y, X, verbose, n_iter, a_lambda, b_lambda, type, batch_size, omega, kappa, const_rhot));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_vir_mv_probit_lp_m_lq_z", (DL_FUNC) &_vir_mv_probit_lp_m_lq_z, 15},
    {"_vir_lp_indep_matrix_normal", (DL_FUNC) &_vir_lp_indep_matrix_normal, 6},
    {"_vir_lm_hs_gibbs", (DL_FUNC) &_vir_lm_hs_gibbs, 6},
    {"_vir_lm_hs_cavi", (DL_FUNC) &_vir_lm_hs_cavi, 8},
    {"_vir_lm_hs_svi", (DL_FUNC) &_vir_lm_hs_svi, 11},
    {"_vir_lm_lasso_gibbs", (DL_FUNC) &_vir_lm_lasso_gibbs, 8},
    {"_vir_lm_lasso_cavi", (DL_FUNC) &_vir_lm_lasso_cavi, 10},
    {"_vir_lm_lasso_svi", (DL_FUNC) &_vir_lm_lasso_svi, 13},
    {"_vir_lm_ridge_gibbs", (DL_FUNC) &_vir_lm_ridge_gibbs, 8},
    {"_vir_lm_ridge_gibbs_b0", (DL_FUNC) &_vir_lm_ridge_gibbs_b0, 4},
    {"_vir_lm_ridge_gibbs_b", (DL_FUNC) &_vir_lm_ridge_gibbs_b, 6},
    {"_vir_lm_ridge_gibbs_tau", (DL_FUNC) &_vir_lm_ridge_gibbs_tau, 8},
    {"_vir_lm_ridge_gibbs_lambda", (DL_FUNC) &_vir_lm_ridge_gibbs_lambda, 6},
    {"_vir_lm_ridge_cavi", (DL_FUNC) &_vir_lm_ridge_cavi, 10},
    {"_vir_lm_ridge_svi", (DL_FUNC) &_vir_lm_ridge_svi, 13},
    {"_vir_mv_lm_uninf_gibbs_cpp", (DL_FUNC) &_vir_mv_lm_uninf_gibbs_cpp, 8},
    {"_vir_mv_lm_uninf_cavi_cpp", (DL_FUNC) &_vir_mv_lm_uninf_cavi_cpp, 8},
    {"_vir_mv_probit_uninf_gibbs_cpp", (DL_FUNC) &_vir_mv_probit_uninf_gibbs_cpp, 6},
    {"_vir_mv_probit_uninf_cavi_cpp", (DL_FUNC) &_vir_mv_probit_uninf_cavi_cpp, 8},
    {"_vir_mv_probit_uninf_svi_cpp", (DL_FUNC) &_vir_mv_probit_uninf_svi_cpp, 9},
    {"_vir_probit_gibbs_z", (DL_FUNC) &_vir_probit_gibbs_z, 4},
    {"_vir_probit_gibbs_b0", (DL_FUNC) &_vir_probit_gibbs_b0, 3},
    {"_vir_probit_gibbs_b", (DL_FUNC) &_vir_probit_gibbs_b, 5},
    {"_vir_probit_log_lik", (DL_FUNC) &_vir_probit_log_lik, 5},
    {"_vir_probit_vi_z", (DL_FUNC) &_vir_probit_vi_z, 5},
    {"_vir_probit_vi_b0", (DL_FUNC) &_vir_probit_vi_b0, 6},
    {"_vir_probit_vi_b", (DL_FUNC) &_vir_probit_vi_b, 10},
    {"_vir_probit_hs_gibbs", (DL_FUNC) &_vir_probit_hs_gibbs, 4},
    {"_vir_probit_hs_cavi", (DL_FUNC) &_vir_probit_hs_cavi, 6},
    {"_vir_probit_hs_svi", (DL_FUNC) &_vir_probit_hs_svi, 9},
    {"_vir_probit_lasso_gibbs", (DL_FUNC) &_vir_probit_lasso_gibbs, 6},
    {"_vir_probit_lasso_cavi", (DL_FUNC) &_vir_probit_lasso_cavi, 8},
    {"_vir_probit_lasso_svi", (DL_FUNC) &_vir_probit_lasso_svi, 11},
    {"_vir_probit_ridge_gibbs", (DL_FUNC) &_vir_probit_ridge_gibbs, 6},
    {"_vir_probit_ridge_cavi", (DL_FUNC) &_vir_probit_ridge_cavi, 8},
    {"_vir_probit_ridge_svi", (DL_FUNC) &_vir_probit_ridge_svi, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_vir(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
